// <auto-generated />
using System;
using BE_Healthcare.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BE_Healthcare.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240526172829_Update_TableAppointment_v6")]
    partial class Update_TableAppointment_v6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Appointment", b =>
                {
                    b.Property<int>("IdAppointment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("IdDoctor")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("IdUser")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsRating")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Issue")
                        .HasColumnType("longtext");

                    b.Property<double?>("Price")
                        .HasColumnType("double");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartTimeOfExamination")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("Type")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("idDoctorCancel")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("idUserCancel")
                        .HasColumnType("char(36)");

                    b.HasKey("IdAppointment");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdUser");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            IdAppointment = 5,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9843),
                            Date = new DateTime(2024, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = "11:00",
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            IdUser = new Guid("9117c626-c3d0-4d14-b345-d70d85268623"),
                            IsRating = false,
                            Issue = "Tôi đang gặp phải vấn đề về da liễu, tôi cần bác sĩ kiểm tra và tư vấn giúp tôi.",
                            StartTime = "10:00",
                            Status = 1,
                            Type = false
                        },
                        new
                        {
                            IdAppointment = 6,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9850),
                            Date = new DateTime(2024, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = "10:00",
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            IdUser = new Guid("bfa4b5ec-1ad8-4676-8871-122749af64e4"),
                            IsRating = false,
                            Issue = "Tôi đang gặp phải vấn đề về ruột thừa, tôi cần bác sĩ kiểm tra và tư vấn giúp tôi.",
                            StartTime = "9:00",
                            Status = 1,
                            Type = false
                        },
                        new
                        {
                            IdAppointment = 7,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9853),
                            Date = new DateTime(2024, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = "16:00",
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            IdUser = new Guid("9117c626-c3d0-4d14-b345-d70d85268623"),
                            IsRating = false,
                            Issue = "Toi bi dau bung",
                            StartTime = "15:00",
                            Status = 1,
                            Type = false
                        },
                        new
                        {
                            IdAppointment = 8,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9856),
                            Date = new DateTime(2024, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = "17:00",
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            IdUser = new Guid("9117c626-c3d0-4d14-b345-d70d85268623"),
                            IsRating = false,
                            Issue = "Toi bi dau bung non",
                            StartTime = "16:00",
                            Status = 1,
                            Type = false
                        },
                        new
                        {
                            IdAppointment = 9,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9859),
                            Date = new DateTime(2024, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = "9:00",
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            IdUser = new Guid("9117c626-c3d0-4d14-b345-d70d85268623"),
                            IsRating = false,
                            Issue = "Toi bi dau bung non",
                            StartTime = "8:00",
                            Status = 1,
                            Type = false
                        });
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Certificate", b =>
                {
                    b.Property<int>("IdCertificate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IdDoctor")
                        .HasColumnType("char(36)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StatusVerified")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdCertificate");

                    b.HasIndex("IdDoctor");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            IdCertificate = 1,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9737),
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Image = "https://hellobacsi.com/care/bac-si/bsckii-tran-thi-hoai-huong-646/",
                            Name = "Hội viên chi hội Da liễu Hồ Chí Minh",
                            StatusVerified = 1,
                            Year = 2020
                        },
                        new
                        {
                            IdCertificate = 2,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9742),
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Image = "https://hellobacsi.com/care/bac-si/bsckii-tran-thi-hoai-huong-646/",
                            Name = "Hội viên Hội Da liễu Việt Nam",
                            StatusVerified = 1,
                            Year = 2022
                        });
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Doctor", b =>
                {
                    b.Property<Guid>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BusinessLicense")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("DurationPerAppointment")
                        .HasColumnType("int");

                    b.Property<int?>("IdSpecialty")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("IsVerifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsVerifiedInfoCertificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerifiedInfoTrainingProcess")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerifiedInfoWorkingProcess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NameClinic")
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfComment")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("double");

                    b.Property<double?>("RateAverage")
                        .HasColumnType("double");

                    b.Property<int?>("StatusVerified")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WorkingTimeEnd")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkingTimeStart")
                        .HasColumnType("longtext");

                    b.Property<int?>("YearExperience")
                        .HasColumnType("int");

                    b.HasKey("IdDoctor");

                    b.HasIndex("IdSpecialty");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9666),
                            Description = "Bác sĩ Chuyên khoa I Trần Thị Hoài Hương nguyên là Phó Trưởng khoa Lâm sàng 1 tại Bệnh viện Da liễu TP.HCM.\r\n\r\nVề chuyên môn, bác sĩ chuyên thăm khám và điều trị các vấn đề bệnh lý chuyên sâu về da, bệnh da ở trẻ cũng như các phương pháp thẩm mỹ da liễu.\r\n\r\n\r\nBác sĩ cũng là gương mặt quen thuộc trong những hội nghị hội thảo về Da liễu. Với nền tảng chuyên môn hơn 20 năm, bác sĩ còn được biết đến với thái độ tận tình tận tâm, luôn sẵn sàng tư vấn hỗ trợ bệnh nhân các vấn đề bệnh lý cũng như trao đổi về các liệu pháp thẩm mỹ hiệu quả phù hợp.",
                            DurationPerAppointment = 1,
                            IdSpecialty = 7,
                            IdUser = new Guid("6d2fc8cc-cbfa-401d-aef5-2d1588751d32"),
                            IsVerifiedInfoCertificate = true,
                            IsVerifiedInfoTrainingProcess = true,
                            IsVerifiedInfoWorkingProcess = true,
                            NameClinic = "Phòng khám bác sĩ Hương",
                            NumberOfComment = 0,
                            Price = 500000.0,
                            StatusVerified = 1,
                            WorkingTimeEnd = "17:00",
                            WorkingTimeStart = "08:00",
                            YearExperience = 5
                        },
                        new
                        {
                            IdDoctor = new Guid("954d0f01-a006-443a-957d-3d1165b79ee7"),
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9676),
                            Description = "Tiến sĩ - Bác sĩ Vũ Thái Hà có gần 20 năm kinh nghiệm trong việc tư vấn và điều trị các vấn đề về da liễu như nám, mụn, lão hóa da,…\r\n\r\nVề quá trình đào tạo, bác sĩ tốt nghiệp Bác sĩ nội trú Da liễu, tốt nghiệp bậc Thạc sĩ tại trường Đại học Y Hà Nội. Sau đó, bác sĩ có khoảng thời gian thực tập tại Pháp về phương pháp điều trị các bệnh về da liễu, bệnh về tóc, bệnh về móng.\r\n\r\n\r\nBác sĩ hiện đang đảm nhận vai trò Trưởng khoa Nghiên cứu và Ứng dụng công nghệ tế bào gốc tại Bệnh viện Da liễu Trung Ương. Bên cạnh đó, bác sĩ cũng là người phụ trách chuyên môn tại Phòng khám Da liễu Thái Hà.\r\n\r\nVới nền tảng chuyên môn cực kỳ vững chắc, bác sĩ chuyên thăm khám và điều trị các vấn đề bệnh lý liên quan đến da: viêm da cơ địa, viêm da tiếp xúc, viêm da dầu, thủy đậu, nám da, nám da,...Bên cạnh đó, bác sĩ cũng nhận tư vấn các vấn đề về sẹo, vấn đề về mụn, tình trạng lão hóa da, bớt sắc tố.",
                            DurationPerAppointment = 1,
                            IdSpecialty = 5,
                            IdUser = new Guid("9f12c430-de83-4910-92ac-704bffefaab2"),
                            IsVerifiedInfoCertificate = true,
                            IsVerifiedInfoTrainingProcess = true,
                            IsVerifiedInfoWorkingProcess = true,
                            NameClinic = "Phòng khám Bác sĩ Thái Hà",
                            NumberOfComment = 0,
                            Price = 600000.0,
                            StatusVerified = 1,
                            WorkingTimeEnd = "17:00",
                            WorkingTimeStart = "07:00",
                            YearExperience = 8
                        },
                        new
                        {
                            IdDoctor = new Guid("2536a049-6c0d-45fc-a0d6-ea107731c983"),
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9680),
                            Description = "Tiến sĩ - Bác sĩ Trần Thịnh có gần 40 năm kinh nghiệm thăm khám và điều trị các vấn đề Da liễu. Tiến sĩ nguyên là Trưởng khoa Da liễu - Bệnh viện Da liễu TP.HCM và hiện đang là người điều hành phòng khám Chuyên khoa Da liễu Trần Thịnh.\r\n\r\nVề quá trình đào tạo, tiến sĩ tốt nghiệp chuyên ngành Da liễu tại trường Đại học Y Dược TP. HCM. Sau khi tốt nghiệp, tiến sĩ được giữ lại trường và đảm nhiệm vai trò bác sĩ, cán bộ phòng Khoa học kỹ thuật khoa Y. Đến năm 2009, dù đã là người dày dặn kinh nghiệm trong ngành, bác sĩ tiếp tục dành thời gian học thêm chuyên ngành về Quản lý Y tế tại trường Đại học Y Dược.\r\n\r\n\r\nNgoài cương vị bác sĩ, giai đoạn từ năm 1991 - 1999, tiến sĩ còn đảm đương nhiều vai trò quan trọng tại bệnh viện Da liễu. Trong đó có việc tham gia phụ trách chương trình kiểm soát bệnh lây qua tình dục và AIDS tại TP.HCM cũng như đóng góp vào quá trình đào tạo nguồn lực kế cận với vai trò giảng viên tại các trường đại học.\r\n\r\nNăm 2010, tiến sĩ Trần Thịnh đã nhận được bằng khen từ Bộ trưởng Bộ Y tế về những thành tựu có được. Xuyên suốt quá trình sự nghiệp, tiến sĩ được biết đến là một trong những chuyên gia vững về trình độ chuyên môn, tận tâm tận tình trong quá trình thăm khám.",
                            DurationPerAppointment = 1,
                            IdSpecialty = 1,
                            IdUser = new Guid("efaaf180-4211-45d1-9b08-f085f19cb451"),
                            IsVerifiedInfoCertificate = true,
                            IsVerifiedInfoTrainingProcess = true,
                            IsVerifiedInfoWorkingProcess = true,
                            NameClinic = "Phòng khám bác sĩ Thịnh",
                            NumberOfComment = 0,
                            Price = 400000.0,
                            StatusVerified = 1,
                            WorkingTimeEnd = "18:00",
                            WorkingTimeStart = "08:00",
                            YearExperience = 7
                        });
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.MedicalRecord", b =>
                {
                    b.Property<int>("IdMedicalRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("IdAppointment")
                        .HasColumnType("int");

                    b.Property<Guid>("IdDoctor")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("char(36)");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("IdMedicalRecord");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdUser");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.MedicalSpecialty", b =>
                {
                    b.Property<int>("IdSpecialty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdSpecialty");

                    b.ToTable("MedicalSpecialties");

                    b.HasData(
                        new
                        {
                            IdSpecialty = 1,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8876),
                            Name = "Internal Medicine"
                        },
                        new
                        {
                            IdSpecialty = 2,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8891),
                            Name = "General Surgery"
                        },
                        new
                        {
                            IdSpecialty = 3,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8892),
                            Name = "Obstetrics and Gynecology"
                        },
                        new
                        {
                            IdSpecialty = 4,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8893),
                            Name = "Pediatrics"
                        },
                        new
                        {
                            IdSpecialty = 5,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8894),
                            Name = "Emergency Medicine"
                        },
                        new
                        {
                            IdSpecialty = 6,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8895),
                            Name = "Dermatology"
                        },
                        new
                        {
                            IdSpecialty = 7,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8895),
                            Name = "Dentistry"
                        },
                        new
                        {
                            IdSpecialty = 8,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8896),
                            Name = "Plastic Surgery"
                        },
                        new
                        {
                            IdSpecialty = 9,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8898),
                            Name = "Nuclear Medicine"
                        },
                        new
                        {
                            IdSpecialty = 10,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8899),
                            Name = "Cardiology"
                        },
                        new
                        {
                            IdSpecialty = 11,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8900),
                            Name = "Pulmonology"
                        },
                        new
                        {
                            IdSpecialty = 12,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8900),
                            Name = "Gastroenterology"
                        },
                        new
                        {
                            IdSpecialty = 13,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8901),
                            Name = "Hematology"
                        },
                        new
                        {
                            IdSpecialty = 14,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8902),
                            Name = "Endocrinology"
                        },
                        new
                        {
                            IdSpecialty = 15,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8904),
                            Name = "Public Health"
                        },
                        new
                        {
                            IdSpecialty = 16,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8905),
                            Name = "Preventive Medicine"
                        },
                        new
                        {
                            IdSpecialty = 17,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8906),
                            Name = "Psychiatry"
                        },
                        new
                        {
                            IdSpecialty = 18,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(8907),
                            Name = "Traditional Medicine"
                        });
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Rating", b =>
                {
                    b.Property<int>("IdRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdAppointment")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdDoctor")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("IdUser")
                        .HasColumnType("char(36)");

                    b.Property<int>("RatingScore")
                        .HasColumnType("int");

                    b.HasKey("IdRating");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdUser");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("IdRole");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            IdRole = 1,
                            Name = "User"
                        },
                        new
                        {
                            IdRole = 2,
                            Name = "Doctor"
                        },
                        new
                        {
                            IdRole = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.TimeOff", b =>
                {
                    b.Property<int>("IdTimeOff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("IdDoctor")
                        .HasColumnType("char(36)");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("IdTimeOff");

                    b.HasIndex("IdDoctor");

                    b.ToTable("TimeOffs");

                    b.HasData(
                        new
                        {
                            IdTimeOff = 1,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9704),
                            Date = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = "10:00",
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Reason = "Busy with family",
                            StartTime = "08:00",
                            Status = 1
                        },
                        new
                        {
                            IdTimeOff = 2,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9712),
                            Date = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = "16:00",
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Reason = "Busy with family",
                            StartTime = "15:00",
                            Status = 1
                        },
                        new
                        {
                            IdTimeOff = 3,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9715),
                            Date = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = "13:00",
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            StartTime = "11:00",
                            Status = 2
                        },
                        new
                        {
                            IdTimeOff = 4,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9718),
                            Date = new DateTime(2024, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = "15:00",
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Reason = "Busy with family",
                            StartTime = "13:00",
                            Status = 1
                        });
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.TrainingProcess", b =>
                {
                    b.Property<int>("IdTrainingProcess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdDoctor")
                        .HasColumnType("char(36)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<int?>("StatusVerified")
                        .HasColumnType("int");

                    b.HasKey("IdTrainingProcess");

                    b.HasIndex("IdDoctor");

                    b.ToTable("TrainingProcesses");

                    b.HasData(
                        new
                        {
                            IdTrainingProcess = 1,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9759),
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Major = "Tốt nghiệp Bác sĩ Chuyên khoa II, chuyên ngành Da liễu",
                            SchoolName = "Đại học Y Dược TP.HCM",
                            StatusVerified = 1
                        },
                        new
                        {
                            IdTrainingProcess = 2,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9767),
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Major = "Tốt nghiệp Bác sĩ Chuyên khoa I, chuyên ngành Da liễu",
                            SchoolName = "Đại học Y Dược TP.HCM",
                            StatusVerified = 1
                        },
                        new
                        {
                            IdTrainingProcess = 3,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9770),
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Major = "Tốt nghiệp Bác sĩ Đa khoa",
                            SchoolName = "Đại học Y Dược TP.HCM",
                            StatusVerified = 1
                        },
                        new
                        {
                            IdTrainingProcess = 4,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9772),
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Major = "Tham gia lớp Sơ bộ DInh dưỡng",
                            SchoolName = "Đại học Y khoa Phạm Ngọc Thạch",
                            StatusVerified = 1
                        });
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdminDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("OTPCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OTPVerification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ReasonLockAccount")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("idRole")
                        .HasColumnType("int");

                    b.Property<string>("latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("longtitude")
                        .HasColumnType("longtext");

                    b.HasKey("IdUser");

                    b.HasIndex("idRole");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            IdUser = new Guid("9117c626-c3d0-4d14-b345-d70d85268623"),
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9457),
                            Email = "nguyenquocthanh268@gmail.com",
                            IsAdminDisabled = false,
                            IsLocked = false,
                            IsVerified = true,
                            Name = "Nguyen Quoc Thanh",
                            OTPCreatedAt = new DateTime(2024, 5, 26, 17, 28, 29, 23, DateTimeKind.Utc).AddTicks(9551),
                            OTPVerification = "123456",
                            PasswordHash = new byte[] { 236, 251, 103, 152, 220, 143, 76, 225, 33, 113, 52, 233, 235, 47, 213, 110, 241, 249, 154, 71, 47, 208, 158, 35, 63, 121, 250, 2, 143, 14, 229, 173 },
                            PasswordSalt = new byte[] { 168, 8, 127, 140, 91, 111, 250, 71, 253, 148, 93, 123, 209, 177, 25, 230, 194, 93, 100, 168, 252, 66, 114, 224, 219, 174, 253, 245, 144, 232, 235, 82, 121, 204, 26, 135, 207, 207, 185, 112, 226, 39, 224, 160, 184, 18, 102, 253, 99, 247, 160, 37, 175, 122, 185, 182, 0, 50, 246, 98, 36, 145, 127, 201 },
                            idRole = 1
                        },
                        new
                        {
                            IdUser = new Guid("85f97fe1-83e4-4dcc-91ca-367cb29f148e"),
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9553),
                            Email = "buivanhuy@gmail.com",
                            IsAdminDisabled = false,
                            IsLocked = false,
                            IsVerified = true,
                            Name = "Huy Bui",
                            OTPCreatedAt = new DateTime(2024, 5, 26, 17, 28, 29, 23, DateTimeKind.Utc).AddTicks(9568),
                            OTPVerification = "123456",
                            PasswordHash = new byte[] { 236, 251, 103, 152, 220, 143, 76, 225, 33, 113, 52, 233, 235, 47, 213, 110, 241, 249, 154, 71, 47, 208, 158, 35, 63, 121, 250, 2, 143, 14, 229, 173 },
                            PasswordSalt = new byte[] { 168, 8, 127, 140, 91, 111, 250, 71, 253, 148, 93, 123, 209, 177, 25, 230, 194, 93, 100, 168, 252, 66, 114, 224, 219, 174, 253, 245, 144, 232, 235, 82, 121, 204, 26, 135, 207, 207, 185, 112, 226, 39, 224, 160, 184, 18, 102, 253, 99, 247, 160, 37, 175, 122, 185, 182, 0, 50, 246, 98, 36, 145, 127, 201 },
                            idRole = 1
                        },
                        new
                        {
                            IdUser = new Guid("bfa4b5ec-1ad8-4676-8871-122749af64e4"),
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9570),
                            Email = "anhoang@gmail.com",
                            IsAdminDisabled = false,
                            IsLocked = false,
                            IsVerified = true,
                            Name = "Vo A Hoang",
                            OTPCreatedAt = new DateTime(2024, 5, 26, 17, 28, 29, 23, DateTimeKind.Utc).AddTicks(9582),
                            OTPVerification = "123456",
                            PasswordHash = new byte[] { 236, 251, 103, 152, 220, 143, 76, 225, 33, 113, 52, 233, 235, 47, 213, 110, 241, 249, 154, 71, 47, 208, 158, 35, 63, 121, 250, 2, 143, 14, 229, 173 },
                            PasswordSalt = new byte[] { 168, 8, 127, 140, 91, 111, 250, 71, 253, 148, 93, 123, 209, 177, 25, 230, 194, 93, 100, 168, 252, 66, 114, 224, 219, 174, 253, 245, 144, 232, 235, 82, 121, 204, 26, 135, 207, 207, 185, 112, 226, 39, 224, 160, 184, 18, 102, 253, 99, 247, 160, 37, 175, 122, 185, 182, 0, 50, 246, 98, 36, 145, 127, 201 },
                            idRole = 1
                        },
                        new
                        {
                            IdUser = new Guid("6d2fc8cc-cbfa-401d-aef5-2d1588751d32"),
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9583),
                            Email = "doctor1@gmail.com",
                            IsAdminDisabled = false,
                            IsLocked = false,
                            IsVerified = true,
                            Name = "BS.CKII Trần Thị Hoài Hương",
                            OTPCreatedAt = new DateTime(2024, 5, 26, 17, 28, 29, 23, DateTimeKind.Utc).AddTicks(9597),
                            OTPVerification = "123456",
                            PasswordHash = new byte[] { 236, 251, 103, 152, 220, 143, 76, 225, 33, 113, 52, 233, 235, 47, 213, 110, 241, 249, 154, 71, 47, 208, 158, 35, 63, 121, 250, 2, 143, 14, 229, 173 },
                            PasswordSalt = new byte[] { 168, 8, 127, 140, 91, 111, 250, 71, 253, 148, 93, 123, 209, 177, 25, 230, 194, 93, 100, 168, 252, 66, 114, 224, 219, 174, 253, 245, 144, 232, 235, 82, 121, 204, 26, 135, 207, 207, 185, 112, 226, 39, 224, 160, 184, 18, 102, 253, 99, 247, 160, 37, 175, 122, 185, 182, 0, 50, 246, 98, 36, 145, 127, 201 },
                            idRole = 2
                        },
                        new
                        {
                            IdUser = new Guid("9f12c430-de83-4910-92ac-704bffefaab2"),
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9598),
                            Email = "doctor2@gmail.com",
                            IsAdminDisabled = false,
                            IsLocked = false,
                            IsVerified = true,
                            Name = "TS.BS Vũ Thái Hà",
                            OTPCreatedAt = new DateTime(2024, 5, 26, 17, 28, 29, 23, DateTimeKind.Utc).AddTicks(9610),
                            OTPVerification = "123456",
                            PasswordHash = new byte[] { 236, 251, 103, 152, 220, 143, 76, 225, 33, 113, 52, 233, 235, 47, 213, 110, 241, 249, 154, 71, 47, 208, 158, 35, 63, 121, 250, 2, 143, 14, 229, 173 },
                            PasswordSalt = new byte[] { 168, 8, 127, 140, 91, 111, 250, 71, 253, 148, 93, 123, 209, 177, 25, 230, 194, 93, 100, 168, 252, 66, 114, 224, 219, 174, 253, 245, 144, 232, 235, 82, 121, 204, 26, 135, 207, 207, 185, 112, 226, 39, 224, 160, 184, 18, 102, 253, 99, 247, 160, 37, 175, 122, 185, 182, 0, 50, 246, 98, 36, 145, 127, 201 },
                            idRole = 2
                        },
                        new
                        {
                            IdUser = new Guid("efaaf180-4211-45d1-9b08-f085f19cb451"),
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9611),
                            Email = "doctor3@gmail.com",
                            IsAdminDisabled = false,
                            IsLocked = false,
                            IsVerified = true,
                            Name = "TS.BS Trần Thịnh",
                            OTPCreatedAt = new DateTime(2024, 5, 26, 17, 28, 29, 23, DateTimeKind.Utc).AddTicks(9624),
                            OTPVerification = "123456",
                            PasswordHash = new byte[] { 236, 251, 103, 152, 220, 143, 76, 225, 33, 113, 52, 233, 235, 47, 213, 110, 241, 249, 154, 71, 47, 208, 158, 35, 63, 121, 250, 2, 143, 14, 229, 173 },
                            PasswordSalt = new byte[] { 168, 8, 127, 140, 91, 111, 250, 71, 253, 148, 93, 123, 209, 177, 25, 230, 194, 93, 100, 168, 252, 66, 114, 224, 219, 174, 253, 245, 144, 232, 235, 82, 121, 204, 26, 135, 207, 207, 185, 112, 226, 39, 224, 160, 184, 18, 102, 253, 99, 247, 160, 37, 175, 122, 185, 182, 0, 50, 246, 98, 36, 145, 127, 201 },
                            idRole = 2
                        },
                        new
                        {
                            IdUser = new Guid("efaaf143-4211-45d1-9b08-f085f19caa56"),
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9625),
                            Email = "admin@gmail.com",
                            IsAdminDisabled = false,
                            IsLocked = false,
                            IsVerified = true,
                            Name = "Admin",
                            OTPCreatedAt = new DateTime(2024, 5, 26, 17, 28, 29, 23, DateTimeKind.Utc).AddTicks(9637),
                            OTPVerification = "123456",
                            PasswordHash = new byte[] { 236, 251, 103, 152, 220, 143, 76, 225, 33, 113, 52, 233, 235, 47, 213, 110, 241, 249, 154, 71, 47, 208, 158, 35, 63, 121, 250, 2, 143, 14, 229, 173 },
                            PasswordSalt = new byte[] { 168, 8, 127, 140, 91, 111, 250, 71, 253, 148, 93, 123, 209, 177, 25, 230, 194, 93, 100, 168, 252, 66, 114, 224, 219, 174, 253, 245, 144, 232, 235, 82, 121, 204, 26, 135, 207, 207, 185, 112, 226, 39, 224, 160, 184, 18, 102, 253, 99, 247, 160, 37, 175, 122, 185, 182, 0, 50, 246, 98, 36, 145, 127, 201 },
                            idRole = 3
                        });
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.WorkingProcess", b =>
                {
                    b.Property<int>("IdWorkingProcess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdDoctor")
                        .HasColumnType("char(36)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<int?>("StatusVerified")
                        .HasColumnType("int");

                    b.Property<string>("Workplace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdWorkingProcess");

                    b.HasIndex("IdDoctor");

                    b.ToTable("WorkingProcesses");

                    b.HasData(
                        new
                        {
                            IdWorkingProcess = 1,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9788),
                            EndYear = 2014,
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Position = "Bác sĩ Da liễu",
                            StartYear = 2012,
                            StatusVerified = 1,
                            Workplace = "Phòng khám Da liễu Táo Đỏ"
                        },
                        new
                        {
                            IdWorkingProcess = 2,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9819),
                            EndYear = 2014,
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Position = "Nguyên Phó Trưởng khoa Lâm sàng 1",
                            StartYear = 2012,
                            StatusVerified = 1,
                            Workplace = "Bệnh viện Da liễu TP. HCM"
                        },
                        new
                        {
                            IdWorkingProcess = 3,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9823),
                            EndYear = 2014,
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Position = "Trưởng Khoa Dinh Dưỡng",
                            StartYear = 2012,
                            StatusVerified = 1,
                            Workplace = "Bệnh viện Da liễu TP. HCM"
                        },
                        new
                        {
                            IdWorkingProcess = 4,
                            CreatedAt = new DateTime(2024, 5, 27, 0, 28, 29, 23, DateTimeKind.Local).AddTicks(9825),
                            EndYear = 2014,
                            IdDoctor = new Guid("6c2e4c40-ad25-40fa-ad40-4c620f09d9b2"),
                            Position = "Bác sĩ chuyên khoa da liễu, thẩm mỹ da",
                            StartYear = 2012,
                            StatusVerified = 1,
                            Workplace = "Bệnh viện Da liễu TP. HCM"
                        });
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Appointment", b =>
                {
                    b.HasOne("BE_Healthcare.Data.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor");

                    b.HasOne("BE_Healthcare.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Certificate", b =>
                {
                    b.HasOne("BE_Healthcare.Data.Entities.Doctor", "Doctor")
                        .WithMany("Certificates")
                        .HasForeignKey("IdDoctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Doctor", b =>
                {
                    b.HasOne("BE_Healthcare.Data.Entities.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany()
                        .HasForeignKey("IdSpecialty");

                    b.HasOne("BE_Healthcare.Data.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("BE_Healthcare.Data.Entities.Doctor", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalSpecialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.MedicalRecord", b =>
                {
                    b.HasOne("BE_Healthcare.Data.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_Healthcare.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Rating", b =>
                {
                    b.HasOne("BE_Healthcare.Data.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor");

                    b.HasOne("BE_Healthcare.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.RefreshToken", b =>
                {
                    b.HasOne("BE_Healthcare.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.TimeOff", b =>
                {
                    b.HasOne("BE_Healthcare.Data.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.TrainingProcess", b =>
                {
                    b.HasOne("BE_Healthcare.Data.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.User", b =>
                {
                    b.HasOne("BE_Healthcare.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("idRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.WorkingProcess", b =>
                {
                    b.HasOne("BE_Healthcare.Data.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Doctor", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BE_Healthcare.Data.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
